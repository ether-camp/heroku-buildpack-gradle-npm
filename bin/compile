#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
BIN_DIR=$BP_DIR/bin
OPT_DIR=$BP_DIR/opt
LIB_DIR=$BP_DIR/lib
. $LIB_DIR/common.sh

### Load dependencies
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/binaries.sh

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Build systems tasks (Backend - Gradle, Frontend - NPM)
GRADLE_TASK=${GRADLE_TASK-stage}
NPM_TASK="run build:prod"

print_env
export_env_dir $ENV_DIR

# Locations of backend and frontend folders
FRONTEND_DIR=$1/frontend
BACKEND_DIR=$1/backend
if [ -z "$FRONTEND_SOURCE_DIR" ]; then
    FRONTEND_DIR=$1/$FRONTEND_SOURCE_DIR
fi
if [ -z "$BACKEND_SOURCE_DIR" ]; then
    BACKEND_DIR=$1/$BACKEND_SOURCE_DIR
fi

# Displaying build strategy to user
echo "---> Build Stategy"
echo "--------------------- "
if [ "$SKIP_FRONTEND_BUILD" = "YES" ]
  then
    echo "Frontend build is skipped"
  else
    echo "Frontend dir   = $FRONTEND_DIR"
fi
echo "Backend dir    = $BACKEND_DIR"

install_frontend_bins() {
  local node_engine=$(read_json "$FRONTEND_DIR/package.json" ".engines.node")
  local npm_engine=$(read_json "$FRONTEND_DIR/package.json" ".engines.npm")

  echo "engines.node (package.json):  ${node_engine:-unspecified}"
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"

  node_dir=$CACHE_DIR/node
  if [ ! -d $node_dir ]; then
      mkdir -p $node_dir
  fi
  install_nodejs "$node_engine" "$node_dir"
  PATH=$PATH:$node_dir/bin
  install_npm "$npm_engine"
  export npm_run=$node_dir/bin/npm
}

install_frontend_deps() {
  cd $FRONTEND_DIR
  status  "Installing npm frontend dependencies"
  $npm_run install
}

compile_frontend_assets() {
  cd $FRONTEND_DIR
  echo -n "Building prod frontend assets ... "
  $npm_run --silent $NPM_TASK
}

run_frontend_tasks() {
  install_frontend_bins
  install_frontend_deps
  compile_frontend_assets
}
if [ "$SKIP_FRONTEND_BUILD" != "YES" ]; then
  run_frontend_tasks
fi

install_backend_bins() {
  cd $BACKEND_DIR

  JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-"https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz"}
  mkdir -p /tmp/jvm-common
  curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
  . /tmp/jvm-common/bin/util
  . /tmp/jvm-common/bin/java

  # install JDK
  echo -n "-----> Installing OpenJDK... "
  install_java_with_overlay ${BUILD_DIR}
  echo "done"

  if [ ! -d $CACHE_DIR ] ; then
    mkdir $CACHE_DIR
  fi

  export GRADLE_USER_HOME=$CACHE_DIR/.gradle

  if [ ! -f $BACKEND_DIR/gradlew ] ; then
    echo "-----> Installing Gradle Wrapper..."
    echo "       WARNING: Your application does not have it's own gradlew file."
    echo "       We'll install one for you, but this is a deprecated feature and"
    echo "       in the future may not be supported."
    cp -rn ${OPT_DIR}/wrapper/* ${BACKEND_DIR}
  fi
  chmod +x ${BACKEND_DIR}/gradlew
}
install_backend_bins

build_backend() {
BUILDCMD="./gradlew $GRADLE_TASK"
  # build app
  echo "-----> Building Gradle app..."
  echo "       WARNING: The Gradle buildpack is currently in Beta."
  echo "-----> executing $BUILDCMD"

  $BUILDCMD 2>&1 | sed -u 's/^/       /'
}
build_backend

if [ "${PIPESTATUS[*]}" != "0" ]; then
  echo " !     Failed to build app. PIPESTATUS: ${PIPESTATUS[*]}"
  exit 1
fi
